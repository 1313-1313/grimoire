power-cards
(power-cards)
(world/power "Hatalomkártyák" power-cards)
(rpg.world/power "Hatalomkártyák" power-cards)
(world/power "Hatalomkártyák" power-cards)
(rpg.world/power "Hatalomkártyák" power-cards)
(require 'rpg.world :reload)
(rpg.world/power "Hatalomkártyák" power-cards)
exit
(rpg.server/-main)
(rpg.server/main)
(rpg.world/power "Hatalomkártyák" power-cards)
(rpg.handler/start-router!)
(rpg.server/-main)
(rpg.server/-main 3000)
(rpg.server/-main run 3000)
(rpg.server/-main start 3000)
(rpg.handler/start-example-broadcaster!)
exit
(time (dotimes [_ 1e7] nil))
(let [x 1] (time (dotimes [_ 1e7] (inc x) )))
(let [x 1] (time (dotimes [_ 1e8] (inc x) )))
(let [m {:x 1}] (time (dotimes [_ 1e8] (update m :x inc) )))
(let [m {:x 1}] (time (dotimes [_ 1e6] (update m :x inc) )))
(let [m {:x 1}] (time (dotimes [_ 1e6] (get m :x) )))
(let [m {:x 1}] (time (dotimes [_ 1e8] (get m :x) )))
(let [m {:x 1}] (time (dotimes [_ 1e8] (:x m) )))
(let [m {:x 1}] (time (dotimes [_ 1e8] (m :x) )))
(let [m {:x 1}] (time (dotimes [_ 1e8] (get a 0) )))
(let [a [1]] (time (dotimes [_ 1e8] (get a 0) )))
(let [a [1]] (time (dotimes [_ 1e8] (a 0) )))
(def l (list* range 1000))
(def l (list* (range 1000)))
(type l)
(str l)
(def v (vec (range 1000)))
(let [] (time (dotimes [_ 1e8] (l 9) )))
(def l (apply list (range 1000)))
(type l)
(let [] (time (dotimes [_ 1e8] (l 9) )))
(let [] (time (dotimes [_ 1e8] (nth l 9) )))
(let [] (time (dotimes [_ 1e7] (nth l 9) )))
(let [] (time (dotimes [_ 1e6] (nth l 9) )))
(let [] (time (dotimes [_ 1e6] (nth l 19) )))
(let [] (time (dotimes [_ 1e6] (nth l 29) )))
(let [] (time (dotimes [_ 1e6] (nth v 29) )))
(let [] (time (dotimes [_ 1e6] (nth v 229) )))
exit
(rpg.chat! "1" "2" "3")
(rpg.chat! "1" "2")
(rpg.handler/chat! "1" "2" "3")
(rpg.server/main)
(rpg.server/-main)
(rpg.server/-main 3000)
(rpg.server/main)
(rpg.server/main run)
exit
(run)
(rpg.handler/main)
(rpg.handler)
help
(help)
(rpg.server/main)
(rpg.server/-main)
(rpg.server/run)
:init-ns rpg.server
exit
(defn random-numbers
  "Ez a funkció véletelen számokat ad vissza egy n elemű vektorban."
  [n]
  (vec (take n (repeatedly #(rand-int n)))))
(random-numbers 10)
(defn random-numbers
  "Ez a funkció véletelen számokat ad vissza egy n elemű vektorban."
  [n]
(defn random-numbers
  "Ez a funkció véletelen számokat ad vissza egy n elemű vektorban."
  [n k]
  (vec (take n (repeatedly #(rand-int k)))))
(random-numbers 10 4)
(random-numbers 6 4)
(random-numbers 10 4)
(random-numbers 6 4)
exit
