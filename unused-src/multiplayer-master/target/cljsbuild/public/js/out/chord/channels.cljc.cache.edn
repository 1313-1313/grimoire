;; Analyzed by ClojureScript 1.7.228
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name chord.channels, :imports nil, :requires {cljs.core.async cljs.core.async, p cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols}, :uses {<! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {read-from-ws! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/chord/channels.cljc", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([ws ch]))}, :name chord.channels/read-from-ws!, :variadic false, :file "target/cljsbuild/public/js/out/chord/channels.cljc", :end-column 20, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch]))}, write-to-ws! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/chord/channels.cljc", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([ws ch]))}, :name chord.channels/write-to-ws!, :variadic false, :file "target/cljsbuild/public/js/out/chord/channels.cljc", :end-column 19, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch]))}, bidi-ch {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/chord/channels.cljc", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([read-ch write-ch & [{:keys [on-close]}]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(read-ch write-ch [{:keys [on-close]}])], :arglists ([read-ch write-ch & [{:keys [on-close]}]]), :arglists-meta (nil)}}, :name chord.channels/bidi-ch, :variadic true, :file "target/cljsbuild/public/js/out/chord/channels.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(read-ch write-ch [{:keys [on-close]}])], :arglists ([read-ch write-ch & [{:keys [on-close]}]]), :arglists-meta (nil)}, :method-params [(read-ch write-ch [{:keys [on-close]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([read-ch write-ch & [{:keys [on-close]}]])}, t_chord$channels33751 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/t_chord$channels33751, :file "target/cljsbuild/public/js/out/chord/channels.cljc", :type true, :anonymous true, :column 3, :line 38, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$channels33751 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([read-ch write-ch p__33747 vec__33748 map__33749 on-close meta33752])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/->t_chord$channels33751, :variadic false, :file "target/cljsbuild/public/js/out/chord/channels.cljc", :method-params ([read-ch write-ch p__33747 vec__33748 map__33749 on-close meta33752]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 38, :max-fixed-arity 7, :fn-var true, :arglists (quote ([read-ch write-ch p__33747 vec__33748 map__33749 on-close meta33752])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :on-close write-ch :recur on-close vec__33748 meta33752 read-ch p__33747 :message map__33749}, :order [:message :recur :else :on-close read-ch write-ch p__33747 vec__33748 map__33749 on-close meta33752]}, :doc nil}