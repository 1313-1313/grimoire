;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name infinitelives.pixi.events, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {close! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {*resize-chans* {:name infinitelives.pixi.events/*resize-chans*, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 86, :column 1, :end-line 86, :end-column 20, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 86, :column 6, :end-line 86, :end-column 20}}, del-resize-chan {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 93, :column 7, :end-line 93, :end-column 22, :arglists (quote ([c]))}, :name infinitelives.pixi.events/del-resize-chan, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, request-animation-frame {:name infinitelives.pixi.events/request-animation-frame, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 34, :column 1, :end-line 37, :end-column 26, :arglist (quote ([callback])), :doc "schedules the passed in callback to be fired once, next animation frame.", :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 37, :column 3, :end-line 37, :end-column 26, :arglist (quote ([callback])), :doc "schedules the passed in callback to be fired once, next animation frame."}}, new-resize-chan {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 88, :column 7, :end-line 88, :end-column 22, :arglists (quote ([]))}, :name infinitelives.pixi.events/new-resize-chan, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, del-frame-chan! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 121, :column 7, :end-line 121, :end-column 22, :arglists (quote ([c]))}, :name infinitelives.pixi.events/del-frame-chan!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, *frame-chans* {:name infinitelives.pixi.events/*frame-chans*, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 114, :column 1, :end-line 114, :end-column 19, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 114, :column 6, :end-line 114, :end-column 19}}, clear-resize-chans! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 96, :column 7, :end-line 96, :end-column 26, :arglists (quote ([]))}, :name infinitelives.pixi.events/clear-resize-chans!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, install-resize-handler {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 103, :column 7, :end-line 103, :end-column 29, :arglists (quote ([])), :doc "install the resize callback to resize the main canvas renderer"}, :name infinitelives.pixi.events/install-resize-handler, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "install the resize callback to resize the main canvas renderer"}, install-frame-handler {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 131, :column 7, :end-line 131, :end-column 28, :arglists (quote ([])), :doc "install the frame callback to send frame chan messages"}, :name infinitelives.pixi.events/install-frame-handler, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "install the frame callback to send frame chan messages"}, frame-event-chan-handler {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 127, :column 7, :end-line 127, :end-column 31, :arglists (quote ([ev]))}, :name infinitelives.pixi.events/frame-event-chan-handler, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 31, :method-params ([ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ev]))}, wait-time {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 67, :column 7, :end-line 67, :end-column 16, :arglists (quote ([delay])), :doc "returns a channel which closes when a certain amount of\n  time in milliseconds has passed, but determines that time by counting\n  the requestAnimationFrame callbacks, so that when tab focus is lost,\n  the callback, and thus this wait is suspended.\n\n  ```\n  ;; wait one seconds worth of frames\n  (<! (wait-time 1000))\n  ```"}, :name infinitelives.pixi.events/wait-time, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 16, :method-params ([delay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([delay])), :doc "returns a channel which closes when a certain amount of\n  time in milliseconds has passed, but determines that time by counting\n  the requestAnimationFrame callbacks, so that when tab focus is lost,\n  the callback, and thus this wait is suspended.\n\n  ```\n  ;; wait one seconds worth of frames\n  (<! (wait-time 1000))\n  ```"}, wait-frames {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([frames])), :doc "returns a channel which closes when a certain number\n  of frames have passed. eg\n\n  ```\n  ;; wait 10 frames\n  (<! (wait-frames 10))\n  ```"}, :name infinitelives.pixi.events/wait-frames, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 18, :method-params ([frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frames])), :doc "returns a channel which closes when a certain number\n  of frames have passed. eg\n\n  ```\n  ;; wait 10 frames\n  (<! (wait-frames 10))\n  ```"}, resize-event-chan-handler {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 99, :column 7, :end-line 99, :end-column 32, :arglists (quote ([ev]))}, :name infinitelives.pixi.events/resize-event-chan-handler, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 32, :method-params ([ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ev]))}, fallback-fps {:name infinitelives.pixi.events/fallback-fps, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 8, :column 1, :end-line 8, :end-column 18, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 8, :column 6, :end-line 8, :end-column 18}}, next-frame {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 39, :column 7, :end-line 39, :end-column 17, :arglists (quote ([])), :doc "returns a single use channel which closes on next frame callback.\n  pulling from it waits exactly one frame. eg\n\n  ```\n  ;; wait one frame\n  (<! (next-frame))\n  ```"}, :name infinitelives.pixi.events/next-frame, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns a single use channel which closes on next frame callback.\n  pulling from it waits exactly one frame. eg\n\n  ```\n  ;; wait one frame\n  (<! (next-frame))\n  ```"}, clear-frame-chans! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 124, :column 7, :end-line 124, :end-column 25, :arglists (quote ([]))}, :name infinitelives.pixi.events/clear-frame-chans!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, make-request-animation-frame {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 10, :column 7, :end-line 10, :end-column 35, :arglists (quote ([])), :doc "compose a function that is the r-a-f func. returns a function. This returned function takes a callback and ensures\n  its called next frame"}, :name infinitelives.pixi.events/make-request-animation-frame, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 35, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "compose a function that is the r-a-f func. returns a function. This returned function takes a callback and ensures\n  its called next frame"}, new-frame-chan {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :line 116, :column 7, :end-line 116, :end-column 21, :arglists (quote ([]))}, :name infinitelives.pixi.events/new-frame-chan, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/events.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:else :recur]}, :doc nil}