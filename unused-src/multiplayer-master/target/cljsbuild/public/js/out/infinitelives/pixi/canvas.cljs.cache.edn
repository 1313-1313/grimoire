;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros}, :excludes #{get}, :name infinitelives.pixi.canvas, :imports nil, :requires {cljs.core.async cljs.core.async, events infinitelives.utils.events, infinitelives.utils.events infinitelives.utils.events, dom infinitelives.utils.dom, infinitelives.utils.dom infinitelives.utils.dom, infinitelives.utils.console infinitelives.utils.console, cljsjs.pixi cljsjs.pixi}, :uses {log infinitelives.utils.console, <! cljs.core.async}, :defs {set-default-once! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 21, :column 7, :end-line 21, :end-column 24, :arglists (quote ([canvas]))}, :name infinitelives.pixi.canvas/set-default-once!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 24, :method-params ([canvas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([canvas]))}, remove! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 26, :column 7, :end-line 26, :end-column 14, :arglists (quote ([key]))}, :name infinitelives.pixi.canvas/remove!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 14, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key]))}, make {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 36, :column 7, :end-line 36, :end-column 11, :arglists (quote ([{:keys [expand x y width height canvas engine background], :or {expand false, x 0, y 0, width 800, height 600, background 5242880, engine :auto}}])), :doc "make a new pixi canvas, or initialise pixi with an existing canvas.\n\n  Pass in...\n\n  :expand        if true makes the canvas take the entire window\n  :engine        can be :webgl :canvas or :auto (default :auto)\n\n  and either:\n\n  :canvas        a DOM element to use as the canvas\n\n  or:\n\n  :x             x position for the new canvas\n  :y             y position for the new canvas\n  :width         width of new canvas\n  :height        height of new canvas"}, :name infinitelives.pixi.canvas/make, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 11, :method-params ([p__34635]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [expand x y width height canvas engine background], :or {expand false, x 0, y 0, width 800, height 600, background 5242880, engine :auto}}])), :doc "make a new pixi canvas, or initialise pixi with an existing canvas.\n\n  Pass in...\n\n  :expand        if true makes the canvas take the entire window\n  :engine        can be :webgl :canvas or :auto (default :auto)\n\n  and either:\n\n  :canvas        a DOM element to use as the canvas\n\n  or:\n\n  :x             x position for the new canvas\n  :y             y position for the new canvas\n  :width         width of new canvas\n  :height        height of new canvas"}, get {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([key] [])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([key] []), :arglists ([key] []), :arglists-meta (nil nil)}}, :name infinitelives.pixi.canvas/get, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([key] []), :arglists ([key] []), :arglists-meta (nil nil)}, :method-params ([key] []), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists ([key] [])}, add! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([key canvas] [canvas])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([key canvas] [canvas]), :arglists ([key canvas] [canvas]), :arglists-meta (nil nil)}}, :name infinitelives.pixi.canvas/add!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([key canvas] [canvas]), :arglists ([key canvas] [canvas]), :arglists-meta (nil nil)}, :method-params ([key canvas] [canvas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists ([key canvas] [canvas])}, init {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 199, :column 7, :end-line 199, :end-column 11, :arglists (quote ([opts])), :doc "Initialise the canvas element. Pass in optional keys\n\n  :background    background colour (default 0x000000)\n  :expand        if true makes the canvas take the entire window\n  :engine        can be :webgl :canvas or :auto (default :auto)\n  :layers        A list of keywords to refer to layers, from bottom to top\n  :origins       A mapping of layer names to their origin positions. Default\n                 position is center. Positions can be :center :top :bottom\n                 :left :right :top-left :top-right :bottom-left :bottom-right\n\n  and either:\n\n  :canvas        a DOM element to use as the canvas\n\n  or:\n\n  :x             x position for the new canvas\n  :y             y position for the new canvas\n  :width         width of new canvas\n  :height        height of new canvas\n  "}, :name infinitelives.pixi.canvas/init, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 11, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Initialise the canvas element. Pass in optional keys\n\n  :background    background colour (default 0x000000)\n  :expand        if true makes the canvas take the entire window\n  :engine        can be :webgl :canvas or :auto (default :auto)\n  :layers        A list of keywords to refer to layers, from bottom to top\n  :origins       A mapping of layer names to their origin positions. Default\n                 position is center. Positions can be :center :top :bottom\n                 :left :right :top-left :top-right :bottom-left :bottom-right\n\n  and either:\n\n  :canvas        a DOM element to use as the canvas\n\n  or:\n\n  :x             x position for the new canvas\n  :y             y position for the new canvas\n  :width         width of new canvas\n  :height        height of new canvas\n  "}, center-container! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 137, :column 8, :end-line 137, :end-column 25, :private true, :arglists (quote ([canvas layer edge]))}, :private true, :name infinitelives.pixi.canvas/center-container!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 25, :method-params ([canvas layer edge]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([canvas layer edge]))}, canvas-store {:name infinitelives.pixi.canvas/canvas-store, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 13, :column 1, :end-line 13, :end-column 18, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 13, :column 6, :end-line 13, :end-column 18}}, add-fullscreen-button! {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 303, :column 7, :end-line 303, :end-column 29, :arglists (quote ([{:keys [fullscreen-fn]}]))}, :name infinitelives.pixi.canvas/add-fullscreen-button!, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 29, :method-params ([p__34755]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [fullscreen-fn]}]))}, render {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 285, :column 13, :end-line 285, :end-column 19, :arglists (quote ([]))}, :name infinitelives.pixi.canvas/render, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 7, :line 285, :end-line 285, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, make-stage {:protocol-inline nil, :meta {:file "/home/masik/ENVIRONMENT/repositories/viri.me/unused/multiplayer-master/target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :line 113, :column 7, :end-line 113, :end-column 17, :arglists (quote ([{:keys [layers origins], :or {layers [:backdrop :below :world :above :ui :effect], origins {}}}])), :doc "Layout the stage structure"}, :name infinitelives.pixi.canvas/make-stage, :variadic false, :file "target/cljsbuild/public/js/out/infinitelives/pixi/canvas.cljs", :end-column 17, :method-params ([p__34647]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [layers origins], :or {layers [:backdrop :below :world :above :ui :effect], origins {}}}])), :doc "Layout the stage structure"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :origins :fullscreen-fn :stage :else :render-fn :top :default :width :background :recur :canvas :renderer :center :div :world :layer :ui :expand-fn :layers :position :x :effect :engine :above :backdrop :auto :expand :below :fullscreen-button :img :resize-fn :height :left}, :order [:default :expand :x :y :width :height :canvas :engine :auto :background :left :top :position :renderer :layers :backdrop :below :world :above :ui :effect :origins :stage :layer :fullscreen-button :center :recur :else :render-fn :resize-fn :fullscreen-fn :expand-fn :div :img]}, :doc "Functions for building and manipulating the canvas DOM element"}